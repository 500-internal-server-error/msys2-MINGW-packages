# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>
# Contributor: Andrew Sun <adsun701@gmail.com>

_realname=libcerf
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=2.5
pkgrel=1
epoch=1
pkgdesc="Complex error functions, Dawson, Faddeeva, and Voigt function (mingw-w64)"
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url='https://jugit.fz-juelich.de/mlz/libcerf'
license=('spdx:MIT')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake")
            # "${MINGW_PACKAGE_PREFIX}-ninja") failed to run pod2man command
source=("https://jugit.fz-juelich.de/mlz/libcerf/-/archive/v${pkgver}/${_realname}-v${pkgver}.tar.gz"
        "libcerf-fix-installation-dirs.patch"
        "002-fix-export.patch")
sha256sums=('b3a5e68a30bdbd3a58e9e7c038bd0aa2586b90bbb1c809f76665e176b2d42cdc'
            '2a5f5836bd425646013700c46e20418bd87056dfb3effad6c2a346621abfc3a3'
            '8651ab3609b456e2f3239418fbf6166439f73f7487dea8ba4f3ec94d0e616d28')

prepare() {
  cd "${srcdir}/${_realname}-v${pkgver}"
  patch -Np1 -i "${srcdir}/libcerf-fix-installation-dirs.patch"
  patch -Np1 -i "${srcdir}/002-fix-export.patch"
}

build() {
  mkdir -p "${srcdir}"/build-${MSYSTEM} && cd "${srcdir}"/build-${MSYSTEM}

  LDFLAGS+=" -Wl,--export-all-symbols" \
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    ${MINGW_PREFIX}/bin/cmake \
      -G'MSYS Makefiles' \
      -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_SHARED_LIBS=ON \
      ../${_realname}-v${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

check() {
  cd "${srcdir}"/build-${MSYSTEM}
  PATH="${srcdir}"/build-${MSYSTEM}/lib:${PATH} \
  ${MINGW_PREFIX}/bin/ctest || true
}

package() {
  cd "${srcdir}"/build-${MSYSTEM}
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .

  # License
  install -Dm644 "${srcdir}"/${_realname}-v${pkgver}/LICENSE \
    "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE
}
